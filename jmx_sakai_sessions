#!/usr/bin/perl -w
# -*- perl -*-

=head1 NAME

jmx_sakai_sessions - Plugin to monitor the number of sessions in Sakai.

=head1 APPLICABLE SYSTEMS

The Sakai CLE running inside tomcat with JMX enabled.

=head1 CONFIGURATION

  [jmx_sakai_sessions]
    env.ip 127.0.0.1
    env.port 5400
    env.username monitorRole
    env.password SomethingSecret

    env.JRE_HOME /usr/lib/jvm/java-6-sun/jre

Needed configuration on the Tomcat side: add

  -Dcom.sun.management.jmxremote \
  -Dcom.sun.management.jmxremote.port=5400 \
  -Dcom.sun.management.jmxremote.ssl=false \
  -Dcom.sun.management.jmxremote.authenticate=false

to CATALINA_OPTS in your startup scripts.

Replace authenticate=false with 
  -Dcom.sun.management.jmxremote.password.file=/etc/tomcat/jmxremote.password \
  -Dcom.sun.management.jmxremote.access.file=/etc/tomcat/jmxremote.access
 ...if you want authentication.

jmxremote.password:
 monitorRole SomethingSecret

jmxremote.access:
 monitorRole readonly

=head1 BUGS

No encryption supported in the JMX connection.

=head1 AUTHORS

=encoding UTF-8

Code written by Jimmy Olsen, Redpill Linpro AS. This code also 
uses code written by Mo Amini, Diyar Amin and Younes Hajji, 
HÃ¸gskolen i Oslo/Oslo University College.

Previous work on JMX plugin by Aleksey Studnev. Support for
authentication added by Ingvar Hagelund, Redpill Linpro AS.

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=manual

=cut

use strict;

my $beans="org.sakaiproject:name=Sessions";
my $munin_jar='/usr/share/munin/munin-jmx-plugins.jar';
my $java='/usr/bin/java';
my $ip=$ENV{'ip'} || "127.0.0.1";
my $port=$ENV{'port'} || "5400";

if($ENV{'JRE_HOME'}) {
    $java="$ENV{'JRE_HOME'}/bin/java";
}

sub loadData() {    
    open(CMD, "-|", $java, "-cp", $munin_jar, "org.munin.plugin.jmx.Beans", $beans) or die "Error: could not run \"$java -cp $munin_jar org.munin.plugin.jmx.Beans $beans\": $!";
    my %data = ();
    while(my $line = <CMD>) {
        chomp($line);
        if(my ($bean, $property, $value) = $line =~ /^(.+)\t(.+)\t(.+)$/) {
            $data{$property} = $value;
        }
    }
    close(CMD);
    return %beans;
}

sub config() {
    print "graph_title Active Sakai Sessions\n";
    print "graph_vlabel sessions\n";
    print "graph_info Number of active Sakai sessions.|n";
    print "graph_category sakai\n";
    print "active_5min.type GAUGE\n";
    print "active_5min.min 0\n";
    print "active_5min.info The number of sessions active in the last 5 minutes.\n";
    print "active_5min.label 5min\n";
    print "active_10min.type GAUGE\n";
    print "active_10min.min 0\n";
    print "active_10min.info The number of sessions active in the last 10 minutes.\n";
    print "active_10min.label 10min\n";
    print "active_15min.type GAUGE\n";
    print "active_15min.min 0\n";
    print "active_15min.info The number of sessions active in the last 15 minutes.\n";
    print "active_15min.label 15min\n";
    print "\n";
}

sub fetch() {
    my %data = loadData();
    printf "active_5min.value %d\n", $data{"Active5Min"};
    printf "active_10min.value %d\n", $data{"Active10Min"};
    printf "active_15min.value %d\n", $data{"Active15Min"};
}

$ENV{'ip'} = $ip;
$ENV{'port'} = $port;

if(defined $ARGV[0] and $ARGV[0] eq "config") {
    config();
} else {
    fetch();
}

# vim: ts=4:ai:et:syntax=perl

