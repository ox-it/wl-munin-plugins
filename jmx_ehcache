#!/usr/bin/perl -w
# -*- perl -*-

=head1 NAME

jmx_ehcache - Plugin to monitor the ehcaches it finds

=head1 APPLICABLE SYSTEMS

Any application that has ehcache in it and is monitorable through JMX

Any JVM that supports JMX should in theory do.

=head1 CONFIGURATION

  [jmx_ehcache]
    env.ip 127.0.0.1
    env.port 5400
    env.username monitorRole
    env.password SomethingSecret
    # The critical and warning levels are in % of the pool size
    env.critical 90
    env.warning 70

    env.JRE_HOME /usr/lib/jvm/java-6-sun/jre

Needed configuration on the Tomcat side: add

  -Dcom.sun.management.jmxremote \
  -Dcom.sun.management.jmxremote.port=5400 \
  -Dcom.sun.management.jmxremote.ssl=false \
  -Dcom.sun.management.jmxremote.authenticate=false

to CATALINA_OPTS in your startup scripts.

Replace authenticate=false with 
  -Dcom.sun.management.jmxremote.password.file=/etc/tomcat/jmxremote.password \
  -Dcom.sun.management.jmxremote.access.file=/etc/tomcat/jmxremote.access
 ...if you want authentication.

jmxremote.password:
 monitorRole SomethingSecret

jmxremote.access:
 monitorRole readonly

=head1 BUGS

No encryption supported in the JMX connection.

=head1 AUTHORS

=encoding UTF-8

Code written by Jimmy Olsen, Redpill Linpro AS. This code also 
uses code written by Mo Amini, Diyar Amin and Younes Hajji, 
HÃ¸gskolen i Oslo/Oslo University College.

Previous work on JMX plugin by Aleksey Studnev. Support for
authentication added by Ingvar Hagelund, Redpill Linpro AS.

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=manual

=cut

use strict;

my $beans="net.sf.ehcache:type=Cache???*,CacheManager=*,name=*";
my @properties=qw{MaxElementsInMemory MemoryStoreObjectCount CacheHits CacheMisses};
my $munin_jar='/usr/share/munin/munin-jmx-plugins.jar';
my $java='/usr/bin/java';
my $ip=$ENV{'ip'} || "127.0.0.1";
my $port=$ENV{'port'} || "5400";

if($ENV{'JRE_HOME'}) {
    $java="$ENV{'JRE_HOME'}/bin/java";
}

# Prefix with a known good char, as field names can't start with a number
sub sanitize_field {
    my ($field) = @_;
    # Get rid novalid characters
    $field =~ s/[^A-Za-z0-9]/_/g;
    # Make sure we don't start with a number by prepending 'v' if we do
    $field =~ s/^[0-9]/v$&/;
    return $field;
}


sub loadData() {    
    open(CMD, "-|", $java, "-cp", $munin_jar, "org.munin.plugin.jmx.Beans", $beans, @properties) or die "Error: could not run \"$java -cp $munin_jar org.munin.plugin.jmx.Beans $beans\": $!";
    my %beans = ();
    while(my $line = <CMD>) {
        chomp($line);
        if(my ($bean, $property, $value) = $line =~ /^(.+)\t(.+)\t(.+)$/) {
            if (my ($cache) = $bean =~ /name=(.+)$/) {
              my ($beandata) = $beans{$cache};
              if (!$beandata) {
                $beandata = {};
                $beans{$cache} = $beandata;
              }
              $beandata->{$property} = $value;
            }
        }
    }
    close(CMD);
    return %beans;
}

sub config() {
    my %beans = loadData();
    foreach my $bean (keys %beans) {
        # As we run multiple JVMs the graph needs to include the port
        printf "multigraph %s\n", sanitize_field($bean. "-". $port); 
        print "graph_title EhCache (port $port) $bean\n";
        print "graph_vlabel percentage\n";
        print "graph_info The utilisation and hit ratio of the cache.\n";
        print "graph_category ehcache\n";
        print "memory_usage.type GAUGE\n";
        print "memory_usage.min 0\n";
        print "memory_usage.max 100\n";
        print "memory_usage.info The percentage of the cache entries that are used.\n";
        print "memory_usage.label Used\n";
        print "hit_ratio.type GAUGE\n";
        print "hit_ratio.min 0\n";
        print "hit_ratio.max 100\n";
        print "hit_ratio.info The percentage of cache lookups that results in a hit.\n";
        print "hit_ratio.label Hit ratio\n";
        print "\n";
    }
}

sub fetch() {
    my %beans = loadData();
    foreach my $bean (keys %beans) {
        printf "multigraph %s\n", sanitize_field($bean); 
        my $mem_max = int($beans{$bean}->{"MaxElementsInMemory"});
        my $mem_num = int($beans{$bean}->{"MemoryStoreObjectCount"});
        # Don't want divide by zero
        if ($mem_max) {
          printf("memory_usage.value %.2f\n", ( $mem_num / $mem_max ) *100);
        }
        my $hit = int($beans{$bean}->{"CacheHits"});
        my $miss = int($beans{$bean}->{"CacheMisses"});
        if ($hit || $miss) {
          printf("hit_ratio.value %.2f\n", ($hit / ($hit + $miss) ) * 100)
        }
    }
}

$ENV{'ip'} = $ip;
$ENV{'port'} = $port;

if(defined $ARGV[0] and $ARGV[0] eq "config") {
    config();
} else {
    fetch();
}

# vim: ts=4:ai:et:syntax=perl

